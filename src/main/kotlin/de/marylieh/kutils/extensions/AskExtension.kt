package de.marylieh.kutils.extensions

import com.aallam.openai.client.OpenAI
import com.kotlindiscord.kord.extensions.commands.Arguments
import com.kotlindiscord.kord.extensions.commands.converters.impl.coalescingDefaultingString
import com.kotlindiscord.kord.extensions.commands.converters.impl.defaultingString
import com.kotlindiscord.kord.extensions.extensions.Extension
import com.kotlindiscord.kord.extensions.extensions.chatCommand
import com.kotlindiscord.kord.extensions.extensions.publicSlashCommand
import com.kotlindiscord.kord.extensions.utils.respond
import de.marylieh.kutils.SERVER_ID
import de.marylieh.kutils.impl.OpenAIManager
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.onCompletion
import kotlinx.coroutines.flow.onEach

class AskExtension : Extension() {
	override val name: String = "ask"

	override suspend fun setup() {
		chatCommand(::AskArgs) {
			name = "ask"
			description = "Ask OpenAI's LLM gpt-3.5-turbo everything you would like to know. By using this feature you agree with OpenAI's privacy policy."

			check { failIf(event.message.author == null) }

			action {
				val responseList = mutableListOf<String>()
				OpenAIManager.generateResponse(arguments.text)
					.onEach { responseList.add(it.choices.first().delta?.content.orEmpty()) }
					.onCompletion {  }
					.collect()

				message.respond(OpenAIManager.formatResponse(responseList))
			}
		}

		publicSlashCommand(::AskSlashArgs) {
			name = "ask"
			description = "Ask OpenAI's LLM gpt-3.5-turbo everything you would like to know."

			guild(SERVER_ID)

			action {
				val responseList = mutableListOf<String>()
				OpenAIManager.generateResponse(arguments.text)
					.onEach { responseList.add(it.choices.first().delta?.content.orEmpty()) }
					.onCompletion { }
					.collect()

				respond { content = OpenAIManager.formatResponse(responseList) }
			}
		}
	}

	inner class AskArgs : Arguments() {
		val text by coalescingDefaultingString {
			name = "question"
			description = "Ask the bot something, responses are generated by OpenAI LLM"

			defaultValue = "Who are you?"
		}
	}

	inner class AskSlashArgs : Arguments() {
		val text by defaultingString {
			name = "question"
			description = "Ask the bot something, responses are generated by OpenAI LLM"

			defaultValue = "Who are you?"
		}
	}
}
